# Use a Go 1.23+ base image
FROM golang:1.23-alpine AS builder

# Install YARA dependency and git
RUN apk update && apk add --no-cache \
    git \
    build-base \
    yara-dev

# Install malcontent
RUN go install github.com/chainguard-dev/malcontent@latest

# Create a runtime container
FROM alpine

# Install YARA in the runtime image
RUN apk update && apk add --no-cache \
    yara

# Copy the malcontent binary from the builder stage
COPY --from=builder /go/bin/malcontent /usr/local/bin/malcontent

# Create a directory for input files
WORKDIR /workspace

# Set malcontent as the entry point, allowing the APK to be passed in at runtime
ENTRYPOINT ["malcontent"]


docker run --rm \
    -v $(pwd):/workspace \
    -v $(pwd)/results:/output \
    malcontent-runner \
    scan /workspace/controller-gen-0.15.0-r0.apk --format json --output /output/results.json


docker run --rm -v $(pwd):/workspace -v $(pwd)/results:/output malcontent-runner scan /workspace/controller-gen-0.15.0-r0.apk --format json --output /output/results.json
