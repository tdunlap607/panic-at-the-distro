#!/bin/bash

# Display usage instructions
usage() {
  echo "Usage: $0 --apk_folder <folder-containing-apks> --result_folder <folder-to-save-results>"
  echo ""
  echo "Options:"
  echo "  --apks     Specify the folder containing the .apk files you want to scan"
  echo "  --results  Specify the folder where the scan results will be saved"
  echo "  --help           Show this help message and exit"
  echo ""
  echo "Example:"
  echo "  $0 --apks ./apk-files --results ./malcontent_scan"
  echo ""
  echo "Description:"
  echo "  This script scans all .apk files in the provided apk folder and saves the"
  echo "  scan results as JSON files in the specified result folder. The result filenames"
  echo "  are based on the .apk filenames with '_scan_results.json' appended."
  exit 1
}

# Parse input arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --apks) apk_folder="$2"; shift ;;
    --results) results_dir="$2"; shift ;;
    --help) usage ;;
    *) echo "Unknown option: $1"; usage ;;
  esac
  shift
done

# Check if required arguments are provided
if [ -z "$apk_folder" ] || [ -z "$results_dir" ]; then
  usage
fi

# Make sure the apk folder exists
if [ ! -d "$apk_folder" ]; then
  echo "Error: APK folder not found: $apk_folder"
  exit 1
fi

# Create the results directory if it doesn't exist
mkdir -p "$results_dir"

# Get current user ID
uid=$(id -u)

# Scan each .apk file in the apk folder
for apk_file in "$apk_folder"/*.apk; do
  if [ -f "$apk_file" ]; then
    results_file="${results_dir}/$(basename "${apk_file}" .apk)_scan_results.json"
    docker run --rm -v "${PWD}":/work --user "$uid" cgr.dev/chainguard/malcontent --format json --output "/work/${results_file}" analyze "/work/${apk_file}"
    echo "Scan completed for ${apk_file}. Results saved to ${results_file}"
  else
    echo "No .apk files found in the specified folder: $apk_folder"
    exit 1
  fi
done